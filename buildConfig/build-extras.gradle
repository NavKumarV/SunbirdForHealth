buildscript {
    repositories {
        maven {
            url 'https://maven.fabric.io/public'
        }
        google()
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'io.fabric.tools:gradle:1.25.1'
    }
}

repositories {
    google()
    maven { 
        url 'https://maven.fabric.io/public' 
    }
}

apply plugin: com.crashlytics.tools.gradle.CrashlyticsPlugin

allprojects {
    repositories {
        google()
        jcenter()

        flatDir {
            dirs 'libs'
        }
    }

}

ext {
    // To make minimum SDK as 21
    // cdvMinSdkVersion = null
    cdvVersionCode=Integer.parseInt('' + "${app_version_code}")
}

android {
    packagingOptions {
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE.txt'
    }

    defaultConfig {
        minSdkVersion 19
        ext.buildNumber = System.getenv("TRAVIS_BUILD_NUMBER") ?: "local"
        versionName "2.8.$ext.buildNumber"
        manifestPlaceholders = [fabricKey: "${release_fabric_api_key}", fabricSecret: "${release_fabric_api_secret}"]
        resValue("string", "_app_name", "${app_name}")
        multiDexEnabled true

        buildConfigField "boolean", "DISPLAY_FRAMEWORK_CATEGORIES_IN_PROFILE", "${display_framework_categories_in_profile}"
        buildConfigField "boolean", "DISPLAY_SIGNIN_FOOTER_CARD_IN_COURSE_TAB_FOR_TEACHER", "${display_signin_footer_card_in_course_tab_for_teacher}"
        buildConfigField "boolean", "DISPLAY_SIGNIN_FOOTER_CARD_IN_LIBRARY_TAB_FOR_TEACHER", "${display_signin_footer_card_in_library_tab_for_teacher}"
        buildConfigField "boolean", "DISPLAY_SIGNIN_FOOTER_CARD_IN_PROFILE_TAB_FOR_TEACHER", "${display_signin_footer_card_in_profile_tab_for_teacher}"
        buildConfigField "boolean", "DISPLAY_SIGNIN_FOOTER_CARD_IN_LIBRARY_TAB_FOR_STUDENT", "${display_signin_footer_card_in_library_tab_for_student}"
        buildConfigField "boolean", "DISPLAY_SIGNIN_FOOTER_CARD_IN_PROFILE_TAB_FOR_STUDENT", "${display_signin_footer_card_in_profile_tab_for_student}"
        buildConfigField "boolean", "TRACK_USER_TELEMETRY", "${track_user_telemetry}"
        buildConfigField "boolean", "CONTENT_STREAMING_ENABLED", "${content_streaming_enabled}"
        buildConfigField "boolean", "DISPLAY_ONBOARDING_CATEGORY_PAGE", "${display_onboarding_category_page}"
        buildConfigField "boolean", "OPEN_RAPDISCOVERY_ENABLED", "${open_rapdiscovery_enabled}"
        buildConfigField "String", "SUPPORT_EMAIL","\"${support_email}\""
    }

    signingConfigs {
        release {

        }
    }

    buildTypes {
        release {
            buildConfigField "boolean", "USE_CRASHLYTICS", "true"
            ext.enableCrashlytics = true
        }
        debug{
            buildConfigField "boolean", "USE_CRASHLYTICS", "false"
            ext.enableCrashlytics = false
        }
    }

    flavorDimensions "default"

    productFlavors {
        production {
            applicationId "${production_app_id}"
            flavorDimensions "default"
            resValue("string", "deeplink_base_url", "${production_deeplink_base_url}")
            resValue("string", "deeplink_ncert_url", "${production_deeplink_ncert_url}")
            resValue("string", "custom_scheme_url", "${production_custom_scheme}")
            buildConfigField 'String', 'BASE_URL', "\"${production_base_url}\""
            buildConfigField 'String', 'MERGE_ACCOUNT_BASE_URL', "\"${production_merge_account_base_url}\""
            buildConfigField 'String', 'PRODUCER_ID', "\"${production_producer_id}\""
            buildConfigField 'String', 'CHANNEL_ID', "\"${production_channel_id}\""
            buildConfigField 'int', 'MAX_COMPATIBILITY_LEVEL', "4"
            buildConfigField 'String', 'MOBILE_APP_CONSUMER', '"mobile_device"'
            buildConfigField 'String', 'MOBILE_APP_KEY', "\"${production_mobile_app_key}\""
            buildConfigField 'String', 'MOBILE_APP_SECRET', "\"${production_mobile_app_secret}\""
            buildConfigField 'String', 'OAUTH_SESSION', '"org.genie.KeycloakOAuthSessionService"'
            buildConfigField "String", "OAUTH_REDIRECT_URL","\"${production_oauth_redirect_url}\""
        }
    }

    task myclean(type: Delete,overwrite: true) {
        def data
        if (System.properties['os.name'].toLowerCase().contains('windows')) {
            data = new File( "$rootDir\\app\\src\\main\\assets\\www\\assets\\data" )
        } else {
            data = new File( "$rootDir/app/src/main/assets/www/assets/data" )
        }

        if (data.exists() ) {
            delete data
            printf "deleted data"
        }
    }

    task copyDirNotificationConfig(type: Copy,overwrite: true) {
        if (System.properties['os.name'].toLowerCase().contains('windows')){
            from "$rootDir\\app\\data\\notificationconfig"
            into "$rootDir\\app\\src\\main\\assets\\www\\assets\\data"
            println "inside copydir notificationconfig windows OS"
        } else {
            from "$rootDir/app/data/notificationconfig"
            into "$rootDir/app/src/main/assets/www/assets/data"
            println "inside copydir notificationconfig linux OS"
        }
    }

    task copyDirFaq(type: Copy,overwrite: true) {
        if (System.properties['os.name'].toLowerCase().contains('windows')){
            from "$rootDir\\app\\data\\faq"
            into "$rootDir\\app\\src\\main\\assets\\www\\assets\\data\\faq"
            println "inside copydir faq windows OS"
        } else {
            from "$rootDir/app/data/faq"
            into "$rootDir/app/src/main/assets/www/assets/data/faq"
            println "inside copydir faq linux OS"
        }
    }

    task copyDirContentRating(type: Copy,overwrite: true) {
        if (System.properties['os.name'].toLowerCase().contains('windows')){
            from "$rootDir\\app\\data\\content-rating"
            into "$rootDir\\app\\src\\main\\assets\\www\\assets\\data\\content-rating"
            println "inside copydir content-rating windows OS"
        } else {
            from "$rootDir/app/data/content-rating"
            into "$rootDir/app/src/main/assets/www/assets/data/content-rating"
            println "inside copydir content-rating linux OS"
        }
    }

    task copyDirProd(type: Copy,overwrite: true) {
        if (System.properties['os.name'].toLowerCase().contains('windows')){
            from "$rootDir\\app\\data\\prod"
            into "$rootDir\\app\\src\\main\\assets\\www\\assets\\data"
            println "inside copydir prod windows OS"
        } else {
            from "$rootDir/app/data/prod"
            into "$rootDir/app/src/main/assets/www/assets/data"
            println "inside copydir prod linux OS"
        }
    }

    task prod(type: GradleBuild) {
        tasks = ['myclean', 'copyDirProd', 'copyDirNotificationConfig', 'copyDirFaq', 'copyDirContentRating']
    }

    applicationVariants.all { variant ->
        def flavor = variant.mergedFlavor
        def name = flavor.getVersionName()
        def flavorName = variant.properties.get('flavorName')
        def versionName = name

        if (flavorName.equals("production")) {
            preBuild.dependsOn(prod)
            println "inside production task"
        }

        if (!flavorName.equals("production")) {
            versionName += ".0";
        }
        if (variant.buildType.isDebuggable()) {
            versionName += '-debug';
        }
        flavor.versionName = versionName;
        variant.buildConfigField("String", "REAL_VERSION_NAME", "\"${versionName}\"");
        variant.outputs.each { output ->
            output.outputFileName = "${variant.name}-${variant.versionName}.apk"
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.google.android.gms:play-services-analytics:10.+'
    implementation 'com.android.support:multidex:1.0.3'
    implementation('com.crashlytics.sdk.android:crashlytics:2.9.4@aar') {
        transitive = true;
    }
}
